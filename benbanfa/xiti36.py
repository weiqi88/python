#coding = utf-8
#关键字


and#并且
del#删除函数
from #导入
not #非
while #循环
as #
elif #条件判断语句
global #将变量定义为全局变量
or #或语句
with# 和 as 配合使用
assert#语句用来声明某个条件是真的
else:
if:
pass:#什么也不做,只是为了防止语法错误
yield:#遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行
break #跳出
except #
import #导入
print #打印
class # 类
exec #
in #判断一个数是否在一个序列里面
raise #
continue #语句是用来告诉Python跳过当前循环块中其余的语句,继续循环的下一次迭代。
finally #异常时不管结果如何，finally里面的语句必须执行
is #is检查两个对象是否是同一个对象
return#返回
def #定义方法
for #循环
lambda#
try#捕获异常

#数据类型
True 
False
None 
strings
numbers
floats
lists

#字符串转义序列
\\ #转义\
\' #单引号
\a #发出系统响铃声
\b # 退格符
\f #换页符
\n #换行符
\r #回车符
\t #横向制表
\v #纵向制表符

#格式化字符串

%d #格式化整数
%i #转换成有符号的十进制
%o #格式化无符号8进制
%u #格式化无符号整型
%x #格式化无符号16进制数
%X #格式化无符号16进制数（大写）
%e #用科学计算法格式化浮点数
%E #同%e用科学计算法格式化浮点数
%f #格式化浮点数字，可指定小数点后的精度
%F #同%f
%g #根据值的大小决定使用%f或%e
%G #作用同%g
%c #格式化字符机器ASCII码
%r #优先用repe()函数进行字符串转换
%s #格式化字符串
%% #输出%
 
 #操作符号
 + #加法 - 对操作符的两侧增加值
 - #减法 - 减去从左侧操作数右侧操作数
 * #乘法 - 相乘的运算符两侧的值
 **#**两个乘号就是乘方,比如2**4,结果就是2的4次方
 / #除 - 由右侧操作数除以左侧操作数
 // #地板除 - 操作数的除法，其中结果是将小数点后的位数被除去的商。
 % #模 - 由右侧操作数和余返回除以左侧操作数
 <
 >
 <=
 >=
 == #检查，两个操作数的值是否相等，如果是则条件变为真。
 != #检查两个操作数的值是否相等，如果值不相等，则条件变为真
 <> #检查两个操作数的值是否相等，如果值不相等，则条件变为真与！=类似
 ()
 []
 {}
 @
 ,
 :
 .
 = #c = a + b将指定的值 a + b 到  c
 ;
 += #c += a 相当于 c = c + a
 -= #c -= a 相当于 c = c - a
 *= #c *= a 相当于 c = c * a
 /= #c /= a 相当于c= c / a
 //= #地板除，并分配一个值，执行地板除对操作和赋值给左操作数,c //= a 相当于 c = c // a
 %=
 **=#c **= a 相当于 c = c ** a
